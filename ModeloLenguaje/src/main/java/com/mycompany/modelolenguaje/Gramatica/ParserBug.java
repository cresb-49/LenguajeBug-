
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.modelolenguaje.Gramatica;

import com.mycompany.modelolenguaje.Lenguaje.Abstracto.*;
import com.mycompany.modelolenguaje.Lenguaje.Abstracto.Retorno.Tipo;
import com.mycompany.modelolenguaje.Lenguaje.Exprecion.*;
import com.mycompany.modelolenguaje.Lenguaje.Instrucciones.*;
import com.mycompany.modelolenguaje.Lenguaje.Exprecion.Operacion.OpcionOperacion;
import com.mycompany.modelolenguaje.Lenguaje.Exprecion.Relacional.OpcionRelacional;
import com.mycompany.modelolenguaje.Lenguaje.Exprecion.Logica.OpcionLogica;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserBug extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserBugSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserBug() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserBug(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserBug(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\003\010\000\002\003\011" +
    "\000\002\003\011\000\002\013\004\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\021" +
    "\005\000\002\022\007\000\002\022\005\000\002\022\005" +
    "\000\002\022\003\000\002\023\006\000\002\017\011\000" +
    "\002\017\010\000\002\020\011\000\002\020\010\000\002" +
    "\016\020\000\002\016\017\000\002\007\003\000\002\007" +
    "\003\000\002\015\007\000\002\015\011\000\002\005\006" +
    "\000\002\005\004\000\002\010\005\000\002\010\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\011" +
    "\004\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\004\000\002\011\003\000\002\012\005\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\005\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\016\006\004\007\013\010\006\011\012\012" +
    "\015\013\010\001\002\000\004\057\uffde\001\002\000\004" +
    "\057\020\001\002\000\004\057\uffda\001\002\000\020\002" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\001\002\000\004\057\uffd9\001\002\000\004\002\017\001" +
    "\002\000\004\057\uffdd\001\002\000\004\057\uffdb\001\002" +
    "\000\020\002\001\006\004\007\013\010\006\011\012\012" +
    "\015\013\010\001\002\000\004\057\uffdc\001\002\000\020" +
    "\002\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\041\021" +
    "\001\002\000\020\006\004\007\013\010\006\011\012\012" +
    "\015\013\010\042\024\001\002\000\004\057\225\001\002" +
    "\000\006\042\220\050\217\001\002\000\004\045\025\001" +
    "\002\000\032\005\042\006\004\007\013\010\006\011\012" +
    "\012\015\013\010\046\033\057\037\060\043\061\031\062" +
    "\036\001\002\000\032\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\046\ufff7\057\ufff7\060\ufff7\061" +
    "\ufff7\062\ufff7\001\002\000\032\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\013\ufff8\046\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\001\002\000\032\005\042\006\004" +
    "\007\013\010\006\011\012\012\015\013\010\046\216\057" +
    "\037\060\043\061\031\062\036\001\002\000\004\041\207" +
    "\001\002\000\032\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\046\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\001\002\000\020\002\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\001\002\000\032\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\046" +
    "\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\001\002\000\004" +
    "\057\176\001\002\000\004\041\167\001\002\000\004\036" +
    "\164\001\002\000\032\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\046\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\001\002\000\032\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\046\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\062\ufff4\001\002\000\004\041\154\001\002" +
    "\000\004\041\045\001\002\000\032\005\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\046\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\001\002\000\004\006\046\001" +
    "\002\000\004\057\047\001\002\000\004\036\050\001\002" +
    "\000\026\015\054\032\063\041\052\051\055\052\053\053" +
    "\051\054\064\055\057\056\061\057\062\001\002\000\050" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\042\uffc2\047\uffc2\050\uffc2\001" +
    "\002\000\026\015\054\032\063\041\052\051\055\052\053" +
    "\053\051\054\064\055\057\056\061\057\062\001\002\000" +
    "\050\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\042\uffc3\047\uffc3\050\uffc3" +
    "\001\002\000\026\015\054\032\063\041\052\051\055\052" +
    "\053\053\051\054\064\055\057\056\061\057\062\001\002" +
    "\000\050\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\033\uffc4\034\uffc4\035\uffc4\042\uffc4\047\uffc4\050" +
    "\uffc4\001\002\000\044\014\077\015\070\016\103\017\102" +
    "\020\073\021\072\023\101\024\071\025\105\026\100\027" +
    "\066\030\104\031\067\033\074\034\076\035\075\047\135" +
    "\001\002\000\050\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\042\uffc0\047" +
    "\uffc0\050\uffc0\001\002\000\050\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\042\uffc6\047\uffc6\050\uffc6\001\002\000\050\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\042\uffbf\047\uffbf\050\uffbf\001\002\000\052" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\041\126\042\uffbe\047\uffbe\050" +
    "\uffbe\001\002\000\026\015\054\032\063\041\052\051\055" +
    "\052\053\053\051\054\064\055\057\056\061\057\062\001" +
    "\002\000\050\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\042\uffc1\047\uffc1" +
    "\050\uffc1\001\002\000\050\014\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\035\uffc7\042" +
    "\uffc7\047\uffc7\050\uffc7\001\002\000\026\015\054\032\063" +
    "\041\052\051\055\052\053\053\051\054\064\055\057\056" +
    "\061\057\062\001\002\000\026\015\054\032\063\041\052" +
    "\051\055\052\053\053\051\054\064\055\057\056\061\057" +
    "\062\001\002\000\026\015\054\032\063\041\052\051\055" +
    "\052\053\053\051\054\064\055\057\056\061\057\062\001" +
    "\002\000\026\015\054\032\063\041\052\051\055\052\053" +
    "\053\051\054\064\055\057\056\061\057\062\001\002\000" +
    "\026\015\054\032\063\041\052\051\055\052\053\053\051" +
    "\054\064\055\057\056\061\057\062\001\002\000\026\015" +
    "\054\032\063\041\052\051\055\052\053\053\051\054\064" +
    "\055\057\056\061\057\062\001\002\000\026\015\054\032" +
    "\063\041\052\051\055\052\053\053\051\054\064\055\057" +
    "\056\061\057\062\001\002\000\026\015\054\032\063\041" +
    "\052\051\055\052\053\053\051\054\064\055\057\056\061" +
    "\057\062\001\002\000\026\015\054\032\063\041\052\051" +
    "\055\052\053\053\051\054\064\055\057\056\061\057\062" +
    "\001\002\000\026\015\054\032\063\041\052\051\055\052" +
    "\053\053\051\054\064\055\057\056\061\057\062\001\002" +
    "\000\026\015\054\032\063\041\052\051\055\052\053\053" +
    "\051\054\064\055\057\056\061\057\062\001\002\000\026" +
    "\015\054\032\063\041\052\051\055\052\053\053\051\054" +
    "\064\055\057\056\061\057\062\001\002\000\026\015\054" +
    "\032\063\041\052\051\055\052\053\053\051\054\064\055" +
    "\057\056\061\057\062\001\002\000\026\015\054\032\063" +
    "\041\052\051\055\052\053\053\051\054\064\055\057\056" +
    "\061\057\062\001\002\000\026\015\054\032\063\041\052" +
    "\051\055\052\053\053\051\054\064\055\057\056\061\057" +
    "\062\001\002\000\026\015\054\032\063\041\052\051\055" +
    "\052\053\053\051\054\064\055\057\056\061\057\062\001" +
    "\002\000\032\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\027\066\030\104\031\067\042\uffcf\047\uffcf\050" +
    "\uffcf\001\002\000\050\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\066\030\uffca\031\067\033\uffca\034\uffca\035\uffca\042\uffca" +
    "\047\uffca\050\uffca\001\002\000\050\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\072\023\101\024\071\025\105" +
    "\026\100\027\066\030\104\031\067\033\074\034\076\035" +
    "\075\042\uffd3\047\uffd3\050\uffd3\001\002\000\050\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\072\023\101\024" +
    "\071\025\105\026\100\027\066\030\104\031\067\033\074" +
    "\034\076\035\075\042\uffd5\047\uffd5\050\uffd5\001\002\000" +
    "\032\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\027\066\030\104\031\067\042\uffd1\047\uffd1\050\uffd1\001" +
    "\002\000\032\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\027\066\030\104\031\067\042\uffce\047\uffce\050" +
    "\uffce\001\002\000\050\014\uffd7\015\uffd7\016\103\017\102" +
    "\020\073\021\072\023\101\024\071\025\105\026\100\027" +
    "\066\030\104\031\067\033\074\034\076\035\075\042\uffd7" +
    "\047\uffd7\050\uffd7\001\002\000\032\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\027\066\030\104\031\067" +
    "\042\uffcc\047\uffcc\050\uffcc\001\002\000\032\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\027\066\030\104" +
    "\031\067\042\uffcd\047\uffcd\050\uffcd\001\002\000\032\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\027\066" +
    "\030\104\031\067\042\uffcb\047\uffcb\050\uffcb\001\002\000" +
    "\050\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\072" +
    "\023\101\024\071\025\105\026\100\027\066\030\104\031" +
    "\067\033\074\034\076\035\075\042\uffd2\047\uffd2\050\uffd2" +
    "\001\002\000\050\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\072\023\101\024\071\025\105\026\100\027\066" +
    "\030\104\031\067\033\074\034\076\035\075\042\uffd4\047" +
    "\uffd4\050\uffd4\001\002\000\032\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\027\066\030\104\031\067\042" +
    "\uffd0\047\uffd0\050\uffd0\001\002\000\050\014\uffd6\015\uffd6" +
    "\016\103\017\102\020\073\021\072\023\101\024\071\025" +
    "\105\026\100\027\066\030\104\031\067\033\074\034\076" +
    "\035\075\042\uffd6\047\uffd6\050\uffd6\001\002\000\050\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\066\030\uffc9\031\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\042\uffc9\047\uffc9\050\uffc9\001\002" +
    "\000\050\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\033\uffc8\034\uffc8\035\uffc8\042\uffc8\047\uffc8\050" +
    "\uffc8\001\002\000\030\015\054\032\063\041\052\042\131" +
    "\051\055\052\053\053\051\054\064\055\057\056\061\057" +
    "\062\001\002\000\046\014\077\015\070\016\103\017\102" +
    "\020\073\021\072\023\101\024\071\025\105\026\100\027" +
    "\066\030\104\031\067\033\074\034\076\035\075\042\uffdf" +
    "\050\uffdf\001\002\000\006\042\133\050\132\001\002\000" +
    "\050\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\042\uffbd\047\uffbd\050\uffbd" +
    "\001\002\000\026\015\054\032\063\041\052\051\055\052" +
    "\053\053\051\054\064\055\057\056\061\057\062\001\002" +
    "\000\050\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\033\uffbc\034\uffbc\035\uffbc\042\uffbc\047\uffbc\050" +
    "\uffbc\001\002\000\046\014\077\015\070\016\103\017\102" +
    "\020\073\021\072\023\101\024\071\025\105\026\100\027" +
    "\066\030\104\031\067\033\074\034\076\035\075\042\uffe0" +
    "\050\uffe0\001\002\000\026\015\054\032\063\041\052\051" +
    "\055\052\053\053\051\054\064\055\057\056\061\057\062" +
    "\001\002\000\044\014\077\015\070\016\103\017\102\020" +
    "\073\021\072\023\101\024\071\025\105\026\100\027\066" +
    "\030\104\031\067\033\074\034\076\035\075\047\137\001" +
    "\002\000\006\037\140\040\141\001\002\000\004\042\uffe6" +
    "\001\002\000\004\042\uffe5\001\002\000\004\042\143\001" +
    "\002\000\004\045\144\001\002\000\032\005\042\006\004" +
    "\007\013\010\006\011\012\012\015\013\010\046\146\057" +
    "\037\060\043\061\031\062\036\001\002\000\032\005\042" +
    "\006\004\007\013\010\006\011\012\012\015\013\010\046" +
    "\150\057\037\060\043\061\031\062\036\001\002\000\032" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\046\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\001\002" +
    "\000\032\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\046\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\001\002\000\032\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\046\uffe8\057\uffe8\060\uffe8\061\uffe8" +
    "\062\uffe8\001\002\000\050\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\023\101\024\071\025\105\026\100" +
    "\027\066\030\104\031\067\033\074\034\076\035\075\042" +
    "\uffd8\047\uffd8\050\uffd8\001\002\000\044\014\077\015\070" +
    "\016\103\017\102\020\073\021\072\023\101\024\071\025" +
    "\105\026\100\027\066\030\104\031\067\033\074\034\076" +
    "\035\075\042\153\001\002\000\050\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\042\uffc5\047\uffc5\050\uffc5\001\002\000\026\015\054" +
    "\032\063\041\052\051\055\052\053\053\051\054\064\055" +
    "\057\056\061\057\062\001\002\000\046\014\077\015\070" +
    "\016\103\017\102\020\073\021\072\023\101\024\071\025" +
    "\105\026\100\027\066\030\104\031\067\033\074\034\076" +
    "\035\075\042\156\050\157\001\002\000\004\047\163\001" +
    "\002\000\026\015\054\032\063\041\052\051\055\052\053" +
    "\053\051\054\064\055\057\056\061\057\062\001\002\000" +
    "\006\042\161\050\132\001\002\000\004\047\162\001\002" +
    "\000\032\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\046\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\001\002\000\032\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\046\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\001\002\000\026\015\054\032\063\041\052\051" +
    "\055\052\053\053\051\054\064\055\057\056\061\057\062" +
    "\001\002\000\044\014\077\015\070\016\103\017\102\020" +
    "\073\021\072\023\101\024\071\025\105\026\100\027\066" +
    "\030\104\031\067\033\074\034\076\035\075\047\166\001" +
    "\002\000\032\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\046\uffed\057\uffed\060\uffed\061\uffed\062" +
    "\uffed\001\002\000\026\015\054\032\063\041\052\051\055" +
    "\052\053\053\051\054\064\055\057\056\061\057\062\001" +
    "\002\000\044\014\077\015\070\016\103\017\102\020\073" +
    "\021\072\023\101\024\071\025\105\026\100\027\066\030" +
    "\104\031\067\033\074\034\076\035\075\042\171\001\002" +
    "\000\004\045\172\001\002\000\032\005\042\006\004\007" +
    "\013\010\006\011\012\012\015\013\010\046\174\057\037" +
    "\060\043\061\031\062\036\001\002\000\032\005\042\006" +
    "\004\007\013\010\006\011\012\012\015\013\010\046\175" +
    "\057\037\060\043\061\031\062\036\001\002\000\032\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\046\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002\000" +
    "\032\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\046\uffec\057\uffec\060\uffec\061\uffec\062\uffec\001" +
    "\002\000\010\036\205\047\uffee\050\uffee\001\002\000\006" +
    "\047\201\050\200\001\002\000\004\057\202\001\002\000" +
    "\032\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\046\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\001" +
    "\002\000\010\036\203\047\ufff0\050\ufff0\001\002\000\026" +
    "\015\054\032\063\041\052\051\055\052\053\053\051\054" +
    "\064\055\057\056\061\057\062\001\002\000\046\014\077" +
    "\015\070\016\103\017\102\020\073\021\072\023\101\024" +
    "\071\025\105\026\100\027\066\030\104\031\067\033\074" +
    "\034\076\035\075\047\ufff1\050\ufff1\001\002\000\026\015" +
    "\054\032\063\041\052\051\055\052\053\053\051\054\064" +
    "\055\057\056\061\057\062\001\002\000\046\014\077\015" +
    "\070\016\103\017\102\020\073\021\072\023\101\024\071" +
    "\025\105\026\100\027\066\030\104\031\067\033\074\034" +
    "\076\035\075\047\uffef\050\uffef\001\002\000\026\015\054" +
    "\032\063\041\052\051\055\052\053\053\051\054\064\055" +
    "\057\056\061\057\062\001\002\000\044\014\077\015\070" +
    "\016\103\017\102\020\073\021\072\023\101\024\071\025" +
    "\105\026\100\027\066\030\104\031\067\033\074\034\076" +
    "\035\075\042\211\001\002\000\004\045\212\001\002\000" +
    "\032\005\042\006\004\007\013\010\006\011\012\012\015" +
    "\013\010\046\214\057\037\060\043\061\031\062\036\001" +
    "\002\000\032\005\042\006\004\007\013\010\006\011\012" +
    "\012\015\013\010\046\215\057\037\060\043\061\031\062" +
    "\036\001\002\000\032\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\046\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\uffe9\001\002\000\032\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\046\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\001\002\000\020\002\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\001\002\000" +
    "\016\006\004\007\013\010\006\011\012\012\015\013\010" +
    "\001\002\000\004\045\221\001\002\000\004\046\222\001" +
    "\002\000\020\002\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\001\002\000\004\057\224\001\002\000" +
    "\006\042\uffe2\050\uffe2\001\002\000\006\042\uffe1\050\uffe1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\012\002\010\003\006\004\013\006\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\015\006\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\022\006\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\034\013\027\014\031\015\026\016\025\017\043" +
    "\020\033\021\040\023\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\034\014\146\015\026\016\025" +
    "\017\043\020\033\021\040\023\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\055\012\057" +
    "\001\001\000\002\001\001\000\006\011\151\012\057\001" +
    "\001\000\002\001\001\000\006\011\150\012\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\064\012\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\124\012\057\001\001\000\006\011\123" +
    "\012\057\001\001\000\006\011\122\012\057\001\001\000" +
    "\006\011\121\012\057\001\001\000\006\011\120\012\057" +
    "\001\001\000\006\011\117\012\057\001\001\000\006\011" +
    "\116\012\057\001\001\000\006\011\115\012\057\001\001" +
    "\000\006\011\114\012\057\001\001\000\006\011\113\012" +
    "\057\001\001\000\006\011\112\012\057\001\001\000\006" +
    "\011\111\012\057\001\001\000\006\011\110\012\057\001" +
    "\001\000\006\011\107\012\057\001\001\000\006\011\106" +
    "\012\057\001\001\000\006\011\105\012\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\127\011\126\012\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\133\012\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\135\012\057\001\001\000\002\001\001\000\004\007\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\034\013\144\014\031" +
    "\015\026\016\025\017\043\020\033\021\040\023\037\001" +
    "\001\000\022\006\034\014\146\015\026\016\025\017\043" +
    "\020\033\021\040\023\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\154\012\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\157" +
    "\011\126\012\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\164" +
    "\012\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\167\012\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\034\013\172\014\031\015\026\016" +
    "\025\017\043\020\033\021\040\023\037\001\001\000\022" +
    "\006\034\014\146\015\026\016\025\017\043\020\033\021" +
    "\040\023\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\203\012\057" +
    "\001\001\000\002\001\001\000\006\011\205\012\057\001" +
    "\001\000\002\001\001\000\006\011\207\012\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\034\013" +
    "\212\014\031\015\026\016\025\017\043\020\033\021\040" +
    "\023\037\001\001\000\022\006\034\014\146\015\026\016" +
    "\025\017\043\020\033\021\040\023\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserBug$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserBug$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserBug$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";
    
    public ParserBug (LexerBug lexerBug){ 
        super(lexerBug);
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserBugSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesBug.obtenerSimbolos(expected_token_ids()).toString();
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesBug.obtenerSimbolos(expected_token_ids()).toString();
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesBug.obtenerSimbolos(expected_token_ids()).toString();
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserBugSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
        } else {
            Token tok = (Token) cur_token.value;
            String er = "Error irrecuperable resuelva el error anterior";
        }
    }

    private void semantic_error(Token token,String contexto) {

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserBug$actions {
  private final ParserBug parser;

  /** Constructor */
  CUP$ParserBug$actions(ParserBug parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserBug$do_action_part00000000(
    int                        CUP$ParserBug$act_num,
    java_cup.runtime.lr_parser CUP$ParserBug$parser,
    java.util.Stack            CUP$ParserBug$stack,
    int                        CUP$ParserBug$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserBug$result;

      /* select the action based on the action number */
      switch (CUP$ParserBug$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= intrucciones 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		RESULT = start_val;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserBug$parser.done_parsing();
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // intrucciones ::= intrucciones funcion 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("intrucciones",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // intrucciones ::= funcion 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("intrucciones",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcion ::= tipoDato ID PAR_A PAR_C LL_A LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcion ::= tipoDato ID PAR_A PAR_C LL_A sentencias LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= tipoDato ID PAR_A parametros PAR_C LL_A LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= sentencias instruc 
            {
              Sentencias RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Sentencias se = (Sentencias)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                RESULT = se;
                RESULT.agregarInstruccion(ins);
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= instruc 
            {
              Sentencias RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                RESULT = new Sentencias(new ArrayList<Instruccion>(), 0, 0);
                RESULT.agregarInstruccion(ins);
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruc ::= print 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruc ::= para 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruc ::= mientras 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruc ::= si 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruc ::= declaracion 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruc ::= asignacion 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= tipoDato listaDeclaracion SEMICOLON 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaDeclaracion ::= listaDeclaracion COMA ID EQ exp 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",16, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listaDeclaracion ::= listaDeclaracion COMA ID 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",16, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listaDeclaracion ::= ID EQ exp 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",16, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listaDeclaracion ::= ID 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",16, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacion ::= ID EQ exp SEMICOLON 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // si ::= IF PAR_A exp PAR_C LL_A sentencias LL_C 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("si",13, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // si ::= IF PAR_A exp PAR_C LL_A LL_C 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("si",13, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // mientras ::= WHILE PAR_A exp PAR_C LL_A sentencias LL_C 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("mientras",14, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mientras ::= WHILE PAR_A exp PAR_C LL_A LL_C 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("mientras",14, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // para ::= FOR PAR_A INT ID EQ exp SEMICOLON exp SEMICOLON opPara PAR_C LL_A sentencias LL_C 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-13)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-13)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-13)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-8)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).right;
		Exprecion c = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		
            RESULT = new For(id.lexema, e, c, op, s, r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("para",12, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-13)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // para ::= FOR PAR_A INT ID EQ exp SEMICOLON exp SEMICOLON opPara PAR_C LL_A LL_C 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-12)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-12)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-9)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-7)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).right;
		Exprecion c = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).value;
		
            RESULT = new For(id.lexema, e, c, op, null, r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("para",12, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-12)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opPara ::= SUMAR 
            {
              Integer RESULT =null;
		
            RESULT = For.SUMAR;
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("opPara",5, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opPara ::= RESTAR 
            {
              Integer RESULT =null;
		
            RESULT = For.RESTAR;
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("opPara",5, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // print ::= PRINT PAR_A exp PAR_C SEMICOLON 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		
            RESULT = new Print(e,new ArrayList<>(), null, r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("print",11, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // print ::= PRINT PAR_A exp COMA enviar PAR_C SEMICOLON 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		List<Exprecion> p = (List<Exprecion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		
            RESULT = new Print(e, p, null, r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("print",11, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros ::= parametros COMA tipoDato ID 
            {
              List<Declaracion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).right;
		List<Declaracion> r = (List<Declaracion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Integer tipo = (Integer)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                RESULT = r;
                RESULT.add(new Declaracion(id.lexema, null, tipo, id.linea, id.columna));
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros ::= tipoDato ID 
            {
              List<Declaracion> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Integer tipo = (Integer)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                RESULT = new ArrayList<>();
                RESULT.add(new Declaracion(id.lexema, null, tipo, id.linea, id.columna));
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // enviar ::= enviar COMA exp 
            {
              List<Exprecion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		List<Exprecion> r = (List<Exprecion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = r;
            RESULT.add(e);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("enviar",6, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // enviar ::= exp 
            {
              List<Exprecion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new ArrayList<>();
            RESULT.add(e);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("enviar",6, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipoDato ::= INT 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.INT.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoDato ::= STRING 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.STRING.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoDato ::= CHAR 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.CHAR.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipoDato ::= DOUBLE 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.DOUBLE.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipoDato ::= BOOL 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.BOOLEAN.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipoDato ::= VOID 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.VOID.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= MENOS exp 
            {
              Exprecion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            Literal e1 = new Literal(-1, Tipo.INT.ordinal(), r.linea, r.columna);
            RESULT = new Operacion(e1, e2, OpcionOperacion.MUL.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp MAS exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.SUMA.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp MENOS exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.RESTA.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp DIV exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.DIV.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp POT exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.POT.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MUL exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.MUL.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp MOD exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.MOD.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp MAQ exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.MAYOR.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp MEQ exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.MENOR.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp MAI exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.MAYOR_IGUAL.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp MEI exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.MENOR_IGUAL.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp DIF exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.DIFERENTE.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp EQUAL exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.IGUAL.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp INCER exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.INCERTEZA.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp OR exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Logica(e1, e2, OpcionLogica.OR.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp XOR exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Logica(e1, e2, OpcionLogica.XOR.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp AND exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Logica(e1, e2, OpcionLogica.AND.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= NOT exp 
            {
              Exprecion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Logica(e, e, OpcionLogica.NOT.ordinal(),r.linea , r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= f 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = e;
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // f ::= PAR_A exp PAR_C 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		
            RESULT = e;
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // f ::= ENTERO 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.INT.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // f ::= DECIMAL 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.DOUBLE.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // f ::= CADENA 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.STRING.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // f ::= CARACTER 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.CHAR.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // f ::= TRUE 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.BOOLEAN.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // f ::= FALSE 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.BOOLEAN.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // f ::= ID 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Variable(e.lexema, e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // f ::= ID PAR_A PAR_C 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		
            RESULT = new ValFuncion(e.lexema, new ArrayList<Exprecion>(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // f ::= ID PAR_A enviar PAR_C 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		List<Exprecion> p = (List<Exprecion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		
            RESULT = new ValFuncion(e.lexema, p, e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserBug$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserBug$do_action(
    int                        CUP$ParserBug$act_num,
    java_cup.runtime.lr_parser CUP$ParserBug$parser,
    java.util.Stack            CUP$ParserBug$stack,
    int                        CUP$ParserBug$top)
    throws java.lang.Exception
    {
              return CUP$ParserBug$do_action_part00000000(
                               CUP$ParserBug$act_num,
                               CUP$ParserBug$parser,
                               CUP$ParserBug$stack,
                               CUP$ParserBug$top);
    }
}

}
