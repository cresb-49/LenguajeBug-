
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.modelolenguaje.Gramatica;

import java.util.ArrayList;
import java.util.Collections;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserBug extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserBugSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserBug() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserBug(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserBug(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\003\000\002\002\004\000\002\011" +
    "\004\000\002\011\003\000\002\006\010\000\002\006\011" +
    "\000\002\006\011\000\002\012\004\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\016\011\000\002\016\010\000\002\017" +
    "\011\000\002\017\010\000\002\015\010\000\002\015\007" +
    "\000\002\014\007\000\002\014\011\000\002\007\006\000" +
    "\002\007\004\000\002\010\005\000\002\010\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\003\004" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\003\000\002\004\005\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\016\006\004\007\013\010\006\011\012\012" +
    "\015\013\010\001\002\000\004\054\uffe8\001\002\000\004" +
    "\054\020\001\002\000\004\054\uffe4\001\002\000\020\002" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\001\002\000\004\054\uffe3\001\002\000\004\002\017\001" +
    "\002\000\004\054\uffe7\001\002\000\004\054\uffe5\001\002" +
    "\000\020\002\001\006\004\007\013\010\006\011\012\012" +
    "\015\013\010\001\002\000\004\054\uffe6\001\002\000\020" +
    "\002\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\036\021" +
    "\001\002\000\020\006\004\007\013\010\006\011\012\012" +
    "\015\013\010\037\024\001\002\000\004\054\173\001\002" +
    "\000\006\037\166\045\165\001\002\000\004\042\025\001" +
    "\002\000\014\005\036\043\035\055\031\056\027\057\033" +
    "\001\002\000\014\005\ufff8\043\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\001\002\000\004\036\156\001\002\000\014\005\ufff9" +
    "\043\ufff9\055\ufff9\056\ufff9\057\ufff9\001\002\000\004\036" +
    "\150\001\002\000\014\005\ufff5\043\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\001\002\000\004\036\141\001\002\000\014\005" +
    "\ufff6\043\ufff6\055\ufff6\056\ufff6\057\ufff6\001\002\000\020" +
    "\002\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\001\002\000\004\036\043\001\002\000\014\005\036" +
    "\043\042\055\031\056\027\057\033\001\002\000\014\005" +
    "\ufff7\043\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000\014" +
    "\005\ufffa\043\ufffa\055\ufffa\056\ufffa\057\ufffa\001\002\000" +
    "\020\002\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\001\002\000\026\015\047\032\056\036\045\046" +
    "\050\047\046\050\044\051\057\052\052\053\054\054\055" +
    "\001\002\000\046\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc\045" +
    "\uffcc\001\002\000\026\015\047\032\056\036\045\046\050" +
    "\047\046\050\044\051\057\052\052\053\054\054\055\001" +
    "\002\000\046\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\045\uffcd" +
    "\001\002\000\026\015\047\032\056\036\045\046\050\047" +
    "\046\050\044\051\057\052\052\053\054\054\055\001\002" +
    "\000\046\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\033\uffce\034\uffce\035\uffce\037\uffce\045\uffce\001" +
    "\002\000\046\014\072\015\063\016\076\017\075\020\067" +
    "\021\065\023\074\024\064\025\100\026\073\027\061\030" +
    "\077\031\062\033\066\034\071\035\070\037\130\045\131" +
    "\001\002\000\046\014\uffca\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\033\uffca\034\uffca\035\uffca\037\uffca\045" +
    "\uffca\001\002\000\046\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0" +
    "\045\uffd0\001\002\000\046\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\037" +
    "\uffc9\045\uffc9\001\002\000\050\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\121\037\uffc8\045\uffc8\001\002\000\026\015\047\032" +
    "\056\036\045\046\050\047\046\050\044\051\057\052\052" +
    "\053\054\054\055\001\002\000\046\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\037\uffcb\045\uffcb\001\002\000\046\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\037\uffd1\045\uffd1\001\002\000\026\015\047\032" +
    "\056\036\045\046\050\047\046\050\044\051\057\052\052" +
    "\053\054\054\055\001\002\000\026\015\047\032\056\036" +
    "\045\046\050\047\046\050\044\051\057\052\052\053\054" +
    "\054\055\001\002\000\026\015\047\032\056\036\045\046" +
    "\050\047\046\050\044\051\057\052\052\053\054\054\055" +
    "\001\002\000\026\015\047\032\056\036\045\046\050\047" +
    "\046\050\044\051\057\052\052\053\054\054\055\001\002" +
    "\000\026\015\047\032\056\036\045\046\050\047\046\050" +
    "\044\051\057\052\052\053\054\054\055\001\002\000\026" +
    "\015\047\032\056\036\045\046\050\047\046\050\044\051" +
    "\057\052\052\053\054\054\055\001\002\000\026\015\047" +
    "\032\056\036\045\046\050\047\046\050\044\051\057\052" +
    "\052\053\054\054\055\001\002\000\026\015\047\032\056" +
    "\036\045\046\050\047\046\050\044\051\057\052\052\053" +
    "\054\054\055\001\002\000\026\015\047\032\056\036\045" +
    "\046\050\047\046\050\044\051\057\052\052\053\054\054" +
    "\055\001\002\000\026\015\047\032\056\036\045\046\050" +
    "\047\046\050\044\051\057\052\052\053\054\054\055\001" +
    "\002\000\026\015\047\032\056\036\045\046\050\047\046" +
    "\050\044\051\057\052\052\053\054\054\055\001\002\000" +
    "\026\015\047\032\056\036\045\046\050\047\046\050\044" +
    "\051\057\052\052\053\054\054\055\001\002\000\026\015" +
    "\047\032\056\036\045\046\050\047\046\050\044\051\057" +
    "\052\052\053\054\054\055\001\002\000\026\015\047\032" +
    "\056\036\045\046\050\047\046\050\044\051\057\052\052" +
    "\053\054\054\055\001\002\000\026\015\047\032\056\036" +
    "\045\046\050\047\046\050\044\051\057\052\052\053\054" +
    "\054\055\001\002\000\026\015\047\032\056\036\045\046" +
    "\050\047\046\050\044\051\057\052\052\053\054\054\055" +
    "\001\002\000\030\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\027\061\030\077\031\062\037\uffd9\045\uffd9" +
    "\001\002\000\046\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\061" +
    "\030\uffd4\031\062\033\uffd4\034\uffd4\035\uffd4\037\uffd4\045" +
    "\uffd4\001\002\000\046\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\065\023\074\024\064\025\100\026\073\027" +
    "\061\030\077\031\062\033\066\034\071\035\070\037\uffdd" +
    "\045\uffdd\001\002\000\046\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\065\023\074\024\064\025\100\026\073" +
    "\027\061\030\077\031\062\033\066\034\071\035\070\037" +
    "\uffdf\045\uffdf\001\002\000\030\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\027\061\030\077\031\062\037" +
    "\uffdb\045\uffdb\001\002\000\030\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\027\061\030\077\031\062\037" +
    "\uffd8\045\uffd8\001\002\000\046\014\uffe1\015\uffe1\016\076" +
    "\017\075\020\067\021\065\023\074\024\064\025\100\026" +
    "\073\027\061\030\077\031\062\033\066\034\071\035\070" +
    "\037\uffe1\045\uffe1\001\002\000\030\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\027\061\030\077\031\062" +
    "\037\uffd6\045\uffd6\001\002\000\030\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\027\061\030\077\031\062" +
    "\037\uffd7\045\uffd7\001\002\000\046\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\065\023\074\024\064\025\100" +
    "\026\073\027\061\030\077\031\062\033\066\034\071\035" +
    "\070\037\uffdc\045\uffdc\001\002\000\030\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\027\061\030\077\031" +
    "\062\037\uffd5\045\uffd5\001\002\000\046\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\065\023\074\024\064\025" +
    "\100\026\073\027\061\030\077\031\062\033\066\034\071" +
    "\035\070\037\uffde\045\uffde\001\002\000\030\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\027\061\030\077" +
    "\031\062\037\uffda\045\uffda\001\002\000\046\014\uffe0\015" +
    "\uffe0\016\076\017\075\020\067\021\065\023\074\024\064" +
    "\025\100\026\073\027\061\030\077\031\062\033\066\034" +
    "\071\035\070\037\uffe0\045\uffe0\001\002\000\046\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\061\030\uffd3\031\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\037\uffd3\045\uffd3\001\002\000\046\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\037\uffd2\045\uffd2\001\002\000\030" +
    "\015\047\032\056\036\045\037\124\046\050\047\046\050" +
    "\044\051\057\052\052\053\054\054\055\001\002\000\046" +
    "\014\072\015\063\016\076\017\075\020\067\021\065\023" +
    "\074\024\064\025\100\026\073\027\061\030\077\031\062" +
    "\033\066\034\071\035\070\037\uffe9\045\uffe9\001\002\000" +
    "\006\037\126\045\125\001\002\000\046\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\037\uffc7\045\uffc7\001\002\000\026\015\047\032" +
    "\056\036\045\046\050\047\046\050\044\051\057\052\052" +
    "\053\054\054\055\001\002\000\046\014\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\037\uffc6\045\uffc6\001\002\000\046\014\072\015\063" +
    "\016\076\017\075\020\067\021\065\023\074\024\064\025" +
    "\100\026\073\027\061\030\077\031\062\033\066\034\071" +
    "\035\070\037\uffea\045\uffea\001\002\000\004\044\135\001" +
    "\002\000\026\015\047\032\056\036\045\046\050\047\046" +
    "\050\044\051\057\052\052\053\054\054\055\001\002\000" +
    "\006\037\133\045\125\001\002\000\004\044\134\001\002" +
    "\000\014\005\uffed\043\uffed\055\uffed\056\uffed\057\uffed\001" +
    "\002\000\014\005\uffee\043\uffee\055\uffee\056\uffee\057\uffee" +
    "\001\002\000\046\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\023\074\024\064\025\100\026\073\027\061" +
    "\030\077\031\062\033\066\034\071\035\070\037\uffe2\045" +
    "\uffe2\001\002\000\044\014\072\015\063\016\076\017\075" +
    "\020\067\021\065\023\074\024\064\025\100\026\073\027" +
    "\061\030\077\031\062\033\066\034\071\035\070\037\140" +
    "\001\002\000\046\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\045" +
    "\uffcf\001\002\000\026\015\047\032\056\036\045\046\050" +
    "\047\046\050\044\051\057\052\052\053\054\054\055\001" +
    "\002\000\044\014\072\015\063\016\076\017\075\020\067" +
    "\021\065\023\074\024\064\025\100\026\073\027\061\030" +
    "\077\031\062\033\066\034\071\035\070\037\143\001\002" +
    "\000\004\042\144\001\002\000\014\005\036\043\145\055" +
    "\031\056\027\057\033\001\002\000\014\005\ufff3\043\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\001\002\000\014\005\036\043" +
    "\147\055\031\056\027\057\033\001\002\000\014\005\ufff4" +
    "\043\ufff4\055\ufff4\056\ufff4\057\ufff4\001\002\000\004\037" +
    "\151\001\002\000\004\042\152\001\002\000\014\005\036" +
    "\043\153\055\031\056\027\057\033\001\002\000\014\005" +
    "\uffef\043\uffef\055\uffef\056\uffef\057\uffef\001\002\000\014" +
    "\005\036\043\155\055\031\056\027\057\033\001\002\000" +
    "\014\005\ufff0\043\ufff0\055\ufff0\056\ufff0\057\ufff0\001\002" +
    "\000\026\015\047\032\056\036\045\046\050\047\046\050" +
    "\044\051\057\052\052\053\054\054\055\001\002\000\044" +
    "\014\072\015\063\016\076\017\075\020\067\021\065\023" +
    "\074\024\064\025\100\026\073\027\061\030\077\031\062" +
    "\033\066\034\071\035\070\037\160\001\002\000\004\042" +
    "\161\001\002\000\014\005\036\043\162\055\031\056\027" +
    "\057\033\001\002\000\014\005\ufff1\043\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\001\002\000\014\005\036\043\164\055\031" +
    "\056\027\057\033\001\002\000\014\005\ufff2\043\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\001\002\000\016\006\004\007\013" +
    "\010\006\011\012\012\015\013\010\001\002\000\004\042" +
    "\167\001\002\000\004\043\170\001\002\000\020\002\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\001" +
    "\002\000\004\054\172\001\002\000\006\037\uffec\045\uffec" +
    "\001\002\000\006\037\uffeb\045\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\012\002\010\005\004\006\006\011\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\004\006\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\021\007\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\036\013\027\014\025\015\037\016\031\017\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\040\014\025\015\037\016\031\017\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\050\004\052\001\001\000\002\001\001\000\006" +
    "\003\136\004\052\001\001\000\002\001\001\000\006\003" +
    "\135\004\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\057\004\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\117\004\052\001" +
    "\001\000\006\003\116\004\052\001\001\000\006\003\115" +
    "\004\052\001\001\000\006\003\114\004\052\001\001\000" +
    "\006\003\113\004\052\001\001\000\006\003\112\004\052" +
    "\001\001\000\006\003\111\004\052\001\001\000\006\003" +
    "\110\004\052\001\001\000\006\003\107\004\052\001\001" +
    "\000\006\003\106\004\052\001\001\000\006\003\105\004" +
    "\052\001\001\000\006\003\104\004\052\001\001\000\006" +
    "\003\103\004\052\001\001\000\006\003\102\004\052\001" +
    "\001\000\006\003\101\004\052\001\001\000\006\003\100" +
    "\004\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\121\004\052\010\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\126\004\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\121\004\052\010" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\141\004\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\145\013" +
    "\027\014\025\015\037\016\031\017\033\001\001\000\002" +
    "\001\001\000\014\013\040\014\025\015\037\016\031\017" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\153\013\027\014\025\015\037\016" +
    "\031\017\033\001\001\000\002\001\001\000\014\013\040" +
    "\014\025\015\037\016\031\017\033\001\001\000\002\001" +
    "\001\000\006\003\156\004\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\162\013\027\014\025\015" +
    "\037\016\031\017\033\001\001\000\002\001\001\000\014" +
    "\013\040\014\025\015\037\016\031\017\033\001\001\000" +
    "\002\001\001\000\004\005\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserBug$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserBug$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserBug$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";
    
    public ParserBug (LexerBug lexerBug){ 
        super(lexerBug);
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserBugSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesBug.obtenerSimbolos(expected_token_ids()).toString();
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesBug.obtenerSimbolos(expected_token_ids()).toString();
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminalesBug.obtenerSimbolos(expected_token_ids()).toString();
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserBugSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
        } else {
            Token tok = (Token) cur_token.value;
            String er = "Error irrecuperable resuelva el error anterior";
        }
    }

    private void semantic_error(Token token,String contexto) {

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserBug$actions {
  private final ParserBug parser;

  /** Constructor */
  CUP$ParserBug$actions(ParserBug parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserBug$do_action_part00000000(
    int                        CUP$ParserBug$act_num,
    java_cup.runtime.lr_parser CUP$ParserBug$parser,
    java.util.Stack            CUP$ParserBug$stack,
    int                        CUP$ParserBug$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserBug$result;

      /* select the action based on the action number */
      switch (CUP$ParserBug$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= intrucciones 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		RESULT = start_val;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserBug$parser.done_parsing();
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // intrucciones ::= intrucciones funcion 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("intrucciones",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // intrucciones ::= funcion 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("intrucciones",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcion ::= tipoDato ID PAR_A PAR_C LL_A LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("funcion",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcion ::= tipoDato ID PAR_A PAR_C LL_A sentencias LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("funcion",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= tipoDato ID PAR_A parametros PAR_C LL_A LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("funcion",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= sentencias instruc 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("sentencias",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= instruc 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("sentencias",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruc ::= print 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",9, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruc ::= para 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",9, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruc ::= mientras 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",9, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruc ::= si 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",9, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // si ::= IF PAR_A exp PAR_C LL_A sentencias LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("si",12, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // si ::= IF PAR_A exp PAR_C LL_A LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("si",12, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mientras ::= WHILE PAR_A exp PAR_C LL_A sentencias LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("mientras",13, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // mientras ::= WHILE PAR_A exp PAR_C LL_A LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("mientras",13, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // para ::= FOR PAR_A PAR_C LL_A sentencias LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("para",11, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // para ::= FOR PAR_A PAR_C LL_A LL_C 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("para",11, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // print ::= PRINT PAR_A exp PAR_C SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("print",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // print ::= PRINT PAR_A exp COMA enviar PAR_C SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("print",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros ::= parametros COMA tipoDato ID 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= tipoDato ID 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // enviar ::= enviar COMA exp 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("enviar",6, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // enviar ::= exp 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("enviar",6, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoDato ::= INT 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoDato ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoDato ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoDato ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoDato ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoDato ::= VOID 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= MENOS exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp MAS exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp MENOS exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp DIV exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp POT exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp MUL exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp MOD exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp MAQ exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp MEQ exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp MAI exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp MEI exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp DIF exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp EQUAL exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp INCER exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp OR exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp XOR exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp AND exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= NOT exp 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= f 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // f ::= PAR_A exp PAR_C 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // f ::= ENTERO 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // f ::= DECIMAL 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // f ::= CADENA 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // f ::= CARACTER 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // f ::= TRUE 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // f ::= FALSE 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // f ::= ID 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // f ::= ID PAR_A PAR_C 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // f ::= ID PAR_A enviar PAR_C 
            {
              Object RESULT =null;
		
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserBug$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserBug$do_action(
    int                        CUP$ParserBug$act_num,
    java_cup.runtime.lr_parser CUP$ParserBug$parser,
    java.util.Stack            CUP$ParserBug$stack,
    int                        CUP$ParserBug$top)
    throws java.lang.Exception
    {
              return CUP$ParserBug$do_action_part00000000(
                               CUP$ParserBug$act_num,
                               CUP$ParserBug$parser,
                               CUP$ParserBug$stack,
                               CUP$ParserBug$top);
    }
}

}
