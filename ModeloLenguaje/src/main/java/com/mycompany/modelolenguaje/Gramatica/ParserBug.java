
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.modelolenguaje.Gramatica;

import com.mycompany.modelolenguaje.Lenguaje.Abstracto.*;
import com.mycompany.modelolenguaje.Lenguaje.Abstracto.Retorno.Tipo;
import com.mycompany.modelolenguaje.Lenguaje.Exprecion.*;
import com.mycompany.modelolenguaje.Lenguaje.Instrucciones.*;
import com.mycompany.modelolenguaje.Lenguaje.Exprecion.Operacion.OpcionOperacion;
import com.mycompany.modelolenguaje.Lenguaje.Exprecion.Relacional.OpcionRelacional;
import com.mycompany.modelolenguaje.Lenguaje.Exprecion.Logica.OpcionLogica;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserBug extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserBugSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserBug() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserBug(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserBug(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\026\005\000\002\025\005\000\002" +
    "\023\010\000\002\023\011\000\002\023\011\000\002\023" +
    "\012\000\002\013\004\000\002\013\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\004\000\002" +
    "\014\004\000\002\014\005\000\002\014\003\000\002\021" +
    "\005\000\002\005\007\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\022\006\000\002\017\011\000" +
    "\002\017\010\000\002\020\011\000\002\020\010\000\002" +
    "\016\020\000\002\016\017\000\002\007\003\000\002\007" +
    "\003\000\002\015\007\000\002\015\011\000\002\004\006" +
    "\000\002\004\004\000\002\010\005\000\002\010\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\011" +
    "\004\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\004\000\002\011\003\000\002\012\005\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\005\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\026\003\017\006\025\010\016\011\004\012" +
    "\026\013\020\014\014\015\006\016\023\064\011\001\002" +
    "\000\004\064\uffd1\001\002\000\030\002\001\003\017\006" +
    "\025\010\016\011\004\012\026\013\020\014\014\015\006" +
    "\016\023\064\011\001\002\000\004\064\uffcf\001\002\000" +
    "\030\002\ufffe\003\ufffe\006\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\064\ufffe\001\002\000" +
    "\004\064\125\001\002\000\004\041\034\001\002\000\030" +
    "\002\ufffb\003\ufffb\006\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\064\ufffb\001\002\000\030" +
    "\002\ufffc\003\ufffc\006\ufffc\010\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\064\ufffc\001\002\000\004" +
    "\064\uffd0\001\002\000\004\002\033\001\002\000\004\057" +
    "\031\001\002\000\030\002\ufff8\003\ufff8\006\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\064" +
    "\ufff8\001\002\000\004\064\uffcd\001\002\000\030\002\ufffa" +
    "\003\ufffa\006\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\064\ufffa\001\002\000\030\002\ufff9" +
    "\003\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\064\ufff9\001\002\000\004\064\uffcc" +
    "\001\002\000\030\002\ufffd\003\ufffd\006\ufffd\010\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\064\ufffd" +
    "\001\002\000\004\007\027\001\002\000\004\064\uffce\001" +
    "\002\000\004\052\030\001\002\000\030\002\ufff6\003\ufff6" +
    "\006\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\064\ufff6\001\002\000\004\052\032\001\002" +
    "\000\030\002\ufff7\003\ufff7\006\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\064\ufff7\001\002" +
    "\000\004\002\000\001\002\000\026\020\040\035\047\044" +
    "\036\056\041\057\037\060\035\061\050\062\043\063\045" +
    "\064\046\001\002\000\050\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\045" +
    "\uffb5\052\uffb5\053\uffb5\001\002\000\026\020\040\035\047" +
    "\044\036\056\041\057\037\060\035\061\050\062\043\063" +
    "\045\064\046\001\002\000\050\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\045\uffb6\052\uffb6\053\uffb6\001\002\000\026\020\040\035" +
    "\047\044\036\056\041\057\037\060\035\061\050\062\043" +
    "\063\045\064\046\001\002\000\050\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\045\uffb7\052\uffb7\053\uffb7\001\002\000\044\017\063" +
    "\020\054\021\067\022\066\023\060\024\056\026\065\027" +
    "\055\030\071\031\064\032\052\033\070\034\053\036\057" +
    "\037\062\040\061\052\121\001\002\000\050\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\045\uffb3\052\uffb3\053\uffb3\001\002\000\050" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\045\uffb9\052\uffb9\053\uffb9\001" +
    "\002\000\050\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2\045\uffb2\052\uffb2" +
    "\053\uffb2\001\002\000\052\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1\044" +
    "\112\045\uffb1\052\uffb1\053\uffb1\001\002\000\026\020\040" +
    "\035\047\044\036\056\041\057\037\060\035\061\050\062" +
    "\043\063\045\064\046\001\002\000\050\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\045\uffb4\052\uffb4\053\uffb4\001\002\000\050\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036" +
    "\uffba\037\uffba\040\uffba\045\uffba\052\uffba\053\uffba\001\002" +
    "\000\026\020\040\035\047\044\036\056\041\057\037\060" +
    "\035\061\050\062\043\063\045\064\046\001\002\000\026" +
    "\020\040\035\047\044\036\056\041\057\037\060\035\061" +
    "\050\062\043\063\045\064\046\001\002\000\026\020\040" +
    "\035\047\044\036\056\041\057\037\060\035\061\050\062" +
    "\043\063\045\064\046\001\002\000\026\020\040\035\047" +
    "\044\036\056\041\057\037\060\035\061\050\062\043\063" +
    "\045\064\046\001\002\000\026\020\040\035\047\044\036" +
    "\056\041\057\037\060\035\061\050\062\043\063\045\064" +
    "\046\001\002\000\026\020\040\035\047\044\036\056\041" +
    "\057\037\060\035\061\050\062\043\063\045\064\046\001" +
    "\002\000\026\020\040\035\047\044\036\056\041\057\037" +
    "\060\035\061\050\062\043\063\045\064\046\001\002\000" +
    "\026\020\040\035\047\044\036\056\041\057\037\060\035" +
    "\061\050\062\043\063\045\064\046\001\002\000\026\020" +
    "\040\035\047\044\036\056\041\057\037\060\035\061\050" +
    "\062\043\063\045\064\046\001\002\000\026\020\040\035" +
    "\047\044\036\056\041\057\037\060\035\061\050\062\043" +
    "\063\045\064\046\001\002\000\026\020\040\035\047\044" +
    "\036\056\041\057\037\060\035\061\050\062\043\063\045" +
    "\064\046\001\002\000\026\020\040\035\047\044\036\056" +
    "\041\057\037\060\035\061\050\062\043\063\045\064\046" +
    "\001\002\000\026\020\040\035\047\044\036\056\041\057" +
    "\037\060\035\061\050\062\043\063\045\064\046\001\002" +
    "\000\026\020\040\035\047\044\036\056\041\057\037\060" +
    "\035\061\050\062\043\063\045\064\046\001\002\000\026" +
    "\020\040\035\047\044\036\056\041\057\037\060\035\061" +
    "\050\062\043\063\045\064\046\001\002\000\026\020\040" +
    "\035\047\044\036\056\041\057\037\060\035\061\050\062" +
    "\043\063\045\064\046\001\002\000\032\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\032\052\033\070\034" +
    "\053\045\uffc2\052\uffc2\053\uffc2\001\002\000\050\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\052\033\uffbd\034\053\036\uffbd" +
    "\037\uffbd\040\uffbd\045\uffbd\052\uffbd\053\uffbd\001\002\000" +
    "\050\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\056" +
    "\026\065\027\055\030\071\031\064\032\052\033\070\034" +
    "\053\036\057\037\062\040\061\045\uffc6\052\uffc6\053\uffc6" +
    "\001\002\000\050\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\056\026\065\027\055\030\071\031\064\032\052" +
    "\033\070\034\053\036\057\037\062\040\061\045\uffc8\052" +
    "\uffc8\053\uffc8\001\002\000\032\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\032\052\033\070\034\053\045" +
    "\uffc4\052\uffc4\053\uffc4\001\002\000\032\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\032\052\033\070\034" +
    "\053\045\uffc1\052\uffc1\053\uffc1\001\002\000\050\017\uffca" +
    "\020\uffca\021\067\022\066\023\060\024\056\026\065\027" +
    "\055\030\071\031\064\032\052\033\070\034\053\036\057" +
    "\037\062\040\061\045\uffca\052\uffca\053\uffca\001\002\000" +
    "\032\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\032\052\033\070\034\053\045\uffbf\052\uffbf\053\uffbf\001" +
    "\002\000\032\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\032\052\033\070\034\053\045\uffc0\052\uffc0\053" +
    "\uffc0\001\002\000\050\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\056\026\065\027\055\030\071\031\064\032" +
    "\052\033\070\034\053\036\057\037\062\040\061\045\uffc5" +
    "\052\uffc5\053\uffc5\001\002\000\032\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\032\052\033\070\034\053" +
    "\045\uffbe\052\uffbe\053\uffbe\001\002\000\050\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\056\026\065\027\055" +
    "\030\071\031\064\032\052\033\070\034\053\036\057\037" +
    "\062\040\061\045\uffc7\052\uffc7\053\uffc7\001\002\000\032" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\032" +
    "\052\033\070\034\053\045\uffc3\052\uffc3\053\uffc3\001\002" +
    "\000\050\017\uffc9\020\uffc9\021\067\022\066\023\060\024" +
    "\056\026\065\027\055\030\071\031\064\032\052\033\070" +
    "\034\053\036\057\037\062\040\061\045\uffc9\052\uffc9\053" +
    "\uffc9\001\002\000\050\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\052\033\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\045\uffbc" +
    "\052\uffbc\053\uffbc\001\002\000\050\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\045\uffbb\052\uffbb\053\uffbb\001\002\000\030\020\040" +
    "\035\047\044\036\045\115\056\041\057\037\060\035\061" +
    "\050\062\043\063\045\064\046\001\002\000\046\017\063" +
    "\020\054\021\067\022\066\023\060\024\056\026\065\027" +
    "\055\030\071\031\064\032\052\033\070\034\053\036\057" +
    "\037\062\040\061\045\uffd2\053\uffd2\001\002\000\006\045" +
    "\117\053\116\001\002\000\050\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\045\uffb0\052\uffb0\053\uffb0\001\002\000\026\020\040\035" +
    "\047\044\036\056\041\057\037\060\035\061\050\062\043" +
    "\063\045\064\046\001\002\000\050\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\045\uffaf\052\uffaf\053\uffaf\001\002\000\046\017\063" +
    "\020\054\021\067\022\066\023\060\024\056\026\065\027" +
    "\055\030\071\031\064\032\052\033\070\034\053\036\057" +
    "\037\062\040\061\045\uffd3\053\uffd3\001\002\000\050\002" +
    "\uffe0\003\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\051\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\071\uffe0\072\uffe0\073\uffe0\001\002" +
    "\000\050\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\026\065\027\055\030\071\031\064\032\052\033\070" +
    "\034\053\036\057\037\062\040\061\045\uffcb\052\uffcb\053" +
    "\uffcb\001\002\000\044\017\063\020\054\021\067\022\066" +
    "\023\060\024\056\026\065\027\055\030\071\031\064\032" +
    "\052\033\070\034\053\036\057\037\062\040\061\045\124" +
    "\001\002\000\050\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\036\uffb8\037\uffb8\040\uffb8\045\uffb8\052" +
    "\uffb8\053\uffb8\001\002\000\012\041\134\044\135\052\uffe1" +
    "\053\uffe1\001\002\000\006\052\130\053\127\001\002\000" +
    "\004\064\131\001\002\000\050\002\uffe5\003\uffe5\005\uffe5" +
    "\006\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\051\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5" +
    "\071\uffe5\072\uffe5\073\uffe5\001\002\000\010\041\132\052" +
    "\uffe3\053\uffe3\001\002\000\026\020\040\035\047\044\036" +
    "\056\041\057\037\060\035\061\050\062\043\063\045\064" +
    "\046\001\002\000\046\017\063\020\054\021\067\022\066" +
    "\023\060\024\056\026\065\027\055\030\071\031\064\032" +
    "\052\033\070\034\053\036\057\037\062\040\061\052\uffe4" +
    "\053\uffe4\001\002\000\026\020\040\035\047\044\036\056" +
    "\041\057\037\060\035\061\050\062\043\063\045\064\046" +
    "\001\002\000\020\011\004\012\026\013\020\014\014\015" +
    "\006\016\023\045\140\001\002\000\004\064\251\001\002" +
    "\000\006\045\242\053\241\001\002\000\004\050\141\001" +
    "\002\000\042\003\157\005\160\011\004\012\026\013\020" +
    "\014\014\015\006\016\023\051\147\064\011\065\162\066" +
    "\145\067\153\071\150\072\161\073\156\001\002\000\042" +
    "\003\uffee\005\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\051\uffee\064\uffee\065\uffee\066\uffee\067\uffee" +
    "\071\uffee\072\uffee\073\uffee\001\002\000\042\003\uffef\005" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\051\uffef\064\uffef\065\uffef\066\uffef\067\uffef\071\uffef\072" +
    "\uffef\073\uffef\001\002\000\042\003\157\005\160\011\004" +
    "\012\026\013\020\014\014\015\006\016\023\051\240\064" +
    "\011\065\162\066\145\067\153\071\150\072\161\073\156" +
    "\001\002\000\004\044\231\001\002\000\042\003\ufff0\005" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\051\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\071\ufff0\072" +
    "\ufff0\073\ufff0\001\002\000\030\002\ufff5\003\ufff5\006\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\064\ufff5\001\002\000\026\020\040\035\047\044\036" +
    "\056\041\057\037\060\035\061\050\062\043\063\045\064" +
    "\046\001\002\000\042\003\uffed\005\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\051\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\071\uffed\072\uffed\073\uffed\001\002" +
    "\000\004\064\226\001\002\000\004\044\217\001\002\000" +
    "\042\003\uffea\005\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\051\uffea\064\uffea\065\uffea\066\uffea\067" +
    "\uffea\071\uffea\072\uffea\073\uffea\001\002\000\042\003\uffeb" +
    "\005\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\051\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\071\uffeb" +
    "\072\uffeb\073\uffeb\001\002\000\004\052\216\001\002\000" +
    "\042\003\uffe6\005\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\051\uffe6\064\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\071\uffe6\072\uffe6\073\uffe6\001\002\000\004\044\206" +
    "\001\002\000\004\052\205\001\002\000\004\044\164\001" +
    "\002\000\042\003\uffec\005\uffec\011\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\051\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\071\uffec\072\uffec\073\uffec\001\002\000\004" +
    "\011\165\001\002\000\004\064\166\001\002\000\004\041" +
    "\167\001\002\000\026\020\040\035\047\044\036\056\041" +
    "\057\037\060\035\061\050\062\043\063\045\064\046\001" +
    "\002\000\044\017\063\020\054\021\067\022\066\023\060" +
    "\024\056\026\065\027\055\030\071\031\064\032\052\033" +
    "\070\034\053\036\057\037\062\040\061\052\171\001\002" +
    "\000\026\020\040\035\047\044\036\056\041\057\037\060" +
    "\035\061\050\062\043\063\045\064\046\001\002\000\044" +
    "\017\063\020\054\021\067\022\066\023\060\024\056\026" +
    "\065\027\055\030\071\031\064\032\052\033\070\034\053" +
    "\036\057\037\062\040\061\052\173\001\002\000\006\042" +
    "\174\043\175\001\002\000\004\045\uffd9\001\002\000\004" +
    "\045\uffd8\001\002\000\004\045\177\001\002\000\004\050" +
    "\200\001\002\000\042\003\157\005\160\011\004\012\026" +
    "\013\020\014\014\015\006\016\023\051\202\064\011\065" +
    "\162\066\145\067\153\071\150\072\161\073\156\001\002" +
    "\000\042\003\157\005\160\011\004\012\026\013\020\014" +
    "\014\015\006\016\023\051\204\064\011\065\162\066\145" +
    "\067\153\071\150\072\161\073\156\001\002\000\042\003" +
    "\uffda\005\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\051\uffda\064\uffda\065\uffda\066\uffda\067\uffda\071" +
    "\uffda\072\uffda\073\uffda\001\002\000\042\003\ufff1\005\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\051" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\071\ufff1\072\ufff1" +
    "\073\ufff1\001\002\000\042\003\uffdb\005\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\051\uffdb\064\uffdb" +
    "\065\uffdb\066\uffdb\067\uffdb\071\uffdb\072\uffdb\073\uffdb\001" +
    "\002\000\042\003\uffe9\005\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\051\uffe9\064\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\071\uffe9\072\uffe9\073\uffe9\001\002\000\026" +
    "\020\040\035\047\044\036\056\041\057\037\060\035\061" +
    "\050\062\043\063\045\064\046\001\002\000\046\017\063" +
    "\020\054\021\067\022\066\023\060\024\056\026\065\027" +
    "\055\030\071\031\064\032\052\033\070\034\053\036\057" +
    "\037\062\040\061\045\210\053\211\001\002\000\004\052" +
    "\215\001\002\000\026\020\040\035\047\044\036\056\041" +
    "\057\037\060\035\061\050\062\043\063\045\064\046\001" +
    "\002\000\006\045\213\053\116\001\002\000\004\052\214" +
    "\001\002\000\042\003\uffd6\005\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\051\uffd6\064\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\071\uffd6\072\uffd6\073\uffd6\001\002\000" +
    "\042\003\uffd7\005\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\051\uffd7\064\uffd7\065\uffd7\066\uffd7\067" +
    "\uffd7\071\uffd7\072\uffd7\073\uffd7\001\002\000\042\003\uffe8" +
    "\005\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\051\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\071\uffe8" +
    "\072\uffe8\073\uffe8\001\002\000\026\020\040\035\047\044" +
    "\036\056\041\057\037\060\035\061\050\062\043\063\045" +
    "\064\046\001\002\000\044\017\063\020\054\021\067\022" +
    "\066\023\060\024\056\026\065\027\055\030\071\031\064" +
    "\032\052\033\070\034\053\036\057\037\062\040\061\045" +
    "\221\001\002\000\004\050\222\001\002\000\042\003\157" +
    "\005\160\011\004\012\026\013\020\014\014\015\006\016" +
    "\023\051\224\064\011\065\162\066\145\067\153\071\150" +
    "\072\161\073\156\001\002\000\042\003\157\005\160\011" +
    "\004\012\026\013\020\014\014\015\006\016\023\051\225" +
    "\064\011\065\162\066\145\067\153\071\150\072\161\073" +
    "\156\001\002\000\042\003\uffde\005\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\051\uffde\064\uffde\065" +
    "\uffde\066\uffde\067\uffde\071\uffde\072\uffde\073\uffde\001\002" +
    "\000\042\003\uffdf\005\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\051\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\067\uffdf\071\uffdf\072\uffdf\073\uffdf\001\002\000\010\041" +
    "\134\052\uffe1\053\uffe1\001\002\000\044\017\063\020\054" +
    "\021\067\022\066\023\060\024\056\026\065\027\055\030" +
    "\071\031\064\032\052\033\070\034\053\036\057\037\062" +
    "\040\061\052\230\001\002\000\042\003\uffe7\005\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\051\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\067\uffe7\071\uffe7\072\uffe7\073" +
    "\uffe7\001\002\000\026\020\040\035\047\044\036\056\041" +
    "\057\037\060\035\061\050\062\043\063\045\064\046\001" +
    "\002\000\044\017\063\020\054\021\067\022\066\023\060" +
    "\024\056\026\065\027\055\030\071\031\064\032\052\033" +
    "\070\034\053\036\057\037\062\040\061\045\233\001\002" +
    "\000\004\050\234\001\002\000\042\003\157\005\160\011" +
    "\004\012\026\013\020\014\014\015\006\016\023\051\236" +
    "\064\011\065\162\066\145\067\153\071\150\072\161\073" +
    "\156\001\002\000\042\003\157\005\160\011\004\012\026" +
    "\013\020\014\014\015\006\016\023\051\237\064\011\065" +
    "\162\066\145\067\153\071\150\072\161\073\156\001\002" +
    "\000\042\003\uffdc\005\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\051\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\071\uffdc\072\uffdc\073\uffdc\001\002\000\042\003" +
    "\uffdd\005\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\051\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\071" +
    "\uffdd\072\uffdd\073\uffdd\001\002\000\030\002\ufff4\003\ufff4" +
    "\006\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\064\ufff4\001\002\000\016\011\004\012\026" +
    "\013\020\014\014\015\006\016\023\001\002\000\004\050" +
    "\243\001\002\000\042\003\157\005\160\011\004\012\026" +
    "\013\020\014\014\015\006\016\023\051\245\064\011\065" +
    "\162\066\145\067\153\071\150\072\161\073\156\001\002" +
    "\000\042\003\157\005\160\011\004\012\026\013\020\014" +
    "\014\015\006\016\023\051\246\064\011\065\162\066\145" +
    "\067\153\071\150\072\161\073\156\001\002\000\030\002" +
    "\ufff3\003\ufff3\006\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\064\ufff3\001\002\000\030\002" +
    "\ufff2\003\ufff2\006\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\064\ufff2\001\002\000\004\064" +
    "\250\001\002\000\006\045\uffd5\053\uffd5\001\002\000\006" +
    "\045\uffd4\053\uffd4\001\002\000\046\017\063\020\054\021" +
    "\067\022\066\023\060\024\056\026\065\027\055\030\071" +
    "\031\064\032\052\033\070\034\053\036\057\037\062\040" +
    "\061\052\uffe2\053\uffe2\001\002\000\030\002\uffff\003\uffff" +
    "\006\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015" +
    "\uffff\016\uffff\064\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\024\002\014\003\004\006\007\021\012\022" +
    "\011\023\023\024\006\025\021\026\020\001\001\000\002" +
    "\001\001\000\020\006\007\021\012\022\011\023\023\024" +
    "\252\025\021\026\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\041\012\043\001" +
    "\001\000\002\001\001\000\006\011\122\012\043\001\001" +
    "\000\002\001\001\000\006\011\121\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\050\012\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\110\012\043\001\001\000\006\011\107\012" +
    "\043\001\001\000\006\011\106\012\043\001\001\000\006" +
    "\011\105\012\043\001\001\000\006\011\104\012\043\001" +
    "\001\000\006\011\103\012\043\001\001\000\006\011\102" +
    "\012\043\001\001\000\006\011\101\012\043\001\001\000" +
    "\006\011\100\012\043\001\001\000\006\011\077\012\043" +
    "\001\001\000\006\011\076\012\043\001\001\000\006\011" +
    "\075\012\043\001\001\000\006\011\074\012\043\001\001" +
    "\000\006\011\073\012\043\001\001\000\006\011\072\012" +
    "\043\001\001\000\006\011\071\012\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\113\011\112\012\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\117\012\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\132\012\043\001" +
    "\001\000\002\001\001\000\006\011\251\012\043\001\001" +
    "\000\006\004\136\006\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\151\013\143" +
    "\014\145\015\142\016\141\017\162\020\150\021\154\022" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\151\014\202\015\142\016\141\017\162\020\150\021" +
    "\154\022\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\226\012\043\001\001\000" +
    "\002\001\001\000\004\005\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\167\012\043\001\001" +
    "\000\002\001\001\000\006\011\171\012\043\001\001\000" +
    "\002\001\001\000\004\007\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\151\013\200\014\145\015\142\016\141\017\162" +
    "\020\150\021\154\022\153\001\001\000\022\006\151\014" +
    "\202\015\142\016\141\017\162\020\150\021\154\022\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\206\012\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\211\011" +
    "\112\012\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\217\012\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\151\013\222\014\145\015\142\016" +
    "\141\017\162\020\150\021\154\022\153\001\001\000\022" +
    "\006\151\014\202\015\142\016\141\017\162\020\150\021" +
    "\154\022\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\231\012\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\151\013\234\014\145\015\142\016" +
    "\141\017\162\020\150\021\154\022\153\001\001\000\022" +
    "\006\151\014\202\015\142\016\141\017\162\020\150\021" +
    "\154\022\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\246\001\001\000\002\001" +
    "\001\000\024\006\151\013\243\014\145\015\142\016\141" +
    "\017\162\020\150\021\154\022\153\001\001\000\022\006" +
    "\151\014\202\015\142\016\141\017\162\020\150\021\154" +
    "\022\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserBug$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserBug$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserBug$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";
    
    public ParserBug (LexerBug lexerBug){ 
        super(lexerBug);
    }
    
    protected int error_sync_size() {
		return 1;
	}

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserBugSym.EOF) {
                String er = "Simbolo inesperado \""+tok.lexema+"\", Linea: "+tok.linea+", Columna: "+tok.columna+", se esperaba: "+ simbolosTerminalesBug.obtenerSimbolos(expected_token_ids()).toString();
                System.out.println(er);
            } else {
                String er = "Simbolo inesperado \""+tok.lexema+"\", Linea: "+tok.linea+", Columna: "+tok.columna+", se esperaba: "+ simbolosTerminalesBug.obtenerSimbolos(expected_token_ids()).toString();
                System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado \""+tok.lexema+"\", Linea: "+tok.linea+", Columna: "+tok.columna+", se esperaba: "+ simbolosTerminalesBug.obtenerSimbolos(expected_token_ids()).toString();
            System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if (cur_token.sym == ParserBugSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            System.out.println(er);
        } else {
            String er = "Error irrecuperable resuelva el error anterior";
            System.out.println(er);
        }
    }

    private void semantic_error(Token token,String contexto) {

    }

    private void asignarTipoDatoDeclaracion(List<Declaracion> lista,int tipo){
      for (Declaracion declaracion : lista) {
        declaracion.setTipo(tipo);
      }
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserBug$actions {
  private final ParserBug parser;

  /** Constructor */
  CUP$ParserBug$actions(ParserBug parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserBug$do_action_part00000000(
    int                        CUP$ParserBug$act_num,
    java_cup.runtime.lr_parser CUP$ParserBug$parser,
    java.util.Stack            CUP$ParserBug$stack,
    int                        CUP$ParserBug$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserBug$result;

      /* select the action based on the action number */
      switch (CUP$ParserBug$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= intrucciones 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		RESULT = start_val;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserBug$parser.done_parsing();
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // intrucciones ::= intrucciones globales 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("intrucciones",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // intrucciones ::= globales 
            {
              Object RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("intrucciones",1, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // globales ::= funcion 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		RESULT = d;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("globales",18, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // globales ::= declaracion 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		RESULT = d;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("globales",18, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // globales ::= asignacion 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		RESULT = d;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("globales",18, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // globales ::= incerteza 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		RESULT = d;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("globales",18, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // globales ::= importar 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		RESULT = d;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("globales",18, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // globales ::= error 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("globales",18, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // incerteza ::= INCERTEZA DECIMAL PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		RESULT = new Incerteza(r.linea, r.columna, (double) val.value);
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("incerteza",20, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // importar ::= IMPORTAR REFFILE PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		RESULT = new Importar(id.lexema, r.linea, r.columna);
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("importar",19, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcion ::= tipoDato ID PAR_A PAR_C LL_A LL_C 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("funcion",17, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcion ::= tipoDato ID PAR_A PAR_C LL_A sentencias LL_C 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("funcion",17, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcion ::= tipoDato ID PAR_A parametros PAR_C LL_A LL_C 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("funcion",17, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion ::= tipoDato ID PAR_A parametros PAR_C LL_A sentencias LL_C 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("funcion",17, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-7)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencias ::= sentencias instruc 
            {
              Sentencias RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Sentencias se = (Sentencias)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                RESULT = se;
                RESULT.agregarInstruccion(ins);
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencias ::= instruc 
            {
              Sentencias RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                RESULT = new Sentencias(new ArrayList<Instruccion>(), 0, 0);
                RESULT.agregarInstruccion(ins);
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruc ::= print 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruc ::= para 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruc ::= mientras 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruc ::= si 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruc ::= declaracion 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruc ::= asignacion 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		 RESULT = ins;
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruc ::= CONTINUAR PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		RESULT = new Continuar(r.linea, r.columna);
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruc ::= BREAK PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		RESULT = new Detener(r.linea, r.columna);
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruc ::= RETURN exp PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		RESULT = new Return(e, r.linea, r.columna);
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruc ::= error 
            {
              Instruccion RESULT =null;

              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("instruc",10, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion ::= tipoDato listaDeclaracion PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Integer tipo = (Integer)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		List<Declaracion> lista = (List<Declaracion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		
                asignarTipoDatoDeclaracion(lista,tipo);
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaDeclaracion ::= listaDeclaracion COMA ID EQ exp 
            {
              List<Declaracion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).right;
		List<Declaracion> l = (List<Declaracion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                        RESULT = l;
                        RESULT.add(new Declaracion(id.lexema, e, Tipo.ERROR.ordinal(), id.linea, id.columna));
                    
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listaDeclaracion ::= listaDeclaracion COMA ID 
            {
              List<Declaracion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		List<Declaracion> l = (List<Declaracion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                        RESULT = l;
                        RESULT.add(new Declaracion(id.lexema, null, Tipo.ERROR.ordinal(), id.linea, id.columna));
                    
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaDeclaracion ::= ID EQ exp 
            {
              List<Declaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                        RESULT = new ArrayList<>();
                        RESULT.add(new Declaracion(id.lexema, e, Tipo.ERROR.ordinal(), id.linea, id.columna));
                    
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaDeclaracion ::= ID 
            {
              List<Declaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                        RESULT = new ArrayList<>();
                        RESULT.add(new Declaracion(id.lexema, null, Tipo.ERROR.ordinal(), id.linea, id.columna));
                    
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignacion ::= ID EQ exp PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		
                RESULT = new Asignacion(id.lexema,e,id.linea,id.columna);
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("asignacion",16, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // si ::= IF PAR_A exp PAR_C LL_A sentencias LL_C 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		
            RESULT = new If(e, s, null , r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("si",13, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // si ::= IF PAR_A exp PAR_C LL_A LL_C 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).value;
		
            RESULT = new If(e, null, null , r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("si",13, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mientras ::= WHILE PAR_A exp PAR_C LL_A sentencias LL_C 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		
                RESULT = new While(e, s, r.linea, r.columna);
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("mientras",14, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mientras ::= WHILE PAR_A exp PAR_C LL_A LL_C 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).value;
		
                RESULT = new While(e, null, r.linea, r.columna);
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("mientras",14, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // para ::= FOR PAR_A INT ID EQ exp PUNTO_COMA exp PUNTO_COMA opPara PAR_C LL_A sentencias LL_C 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-13)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-13)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-13)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-8)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).right;
		Exprecion c = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		
            RESULT = new For(id.lexema, e, c, op, s, r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("para",12, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-13)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // para ::= FOR PAR_A INT ID EQ exp PUNTO_COMA exp PUNTO_COMA opPara PAR_C LL_A LL_C 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-12)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-12)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-9)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-7)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).right;
		Exprecion c = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).value;
		
            RESULT = new For(id.lexema, e, c, op, null, r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("para",12, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-12)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opPara ::= SUMAR 
            {
              Integer RESULT =null;
		
            RESULT = For.SUMAR;
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("opPara",5, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opPara ::= RESTAR 
            {
              Integer RESULT =null;
		
            RESULT = For.RESTAR;
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("opPara",5, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // print ::= PRINT PAR_A exp PAR_C PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		
            RESULT = new Print(e,new ArrayList<>(), null, r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("print",11, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // print ::= PRINT PAR_A exp COMA enviar PAR_C PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		List<Exprecion> p = (List<Exprecion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		
            RESULT = new Print(e, p, null, r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("print",11, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-6)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= parametros COMA tipoDato ID 
            {
              List<Declaracion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).right;
		List<Declaracion> r = (List<Declaracion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Integer tipo = (Integer)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                RESULT = r;
                RESULT.add(new Declaracion(id.lexema, null, tipo, id.linea, id.columna));
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros ::= tipoDato ID 
            {
              List<Declaracion> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Integer tipo = (Integer)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
                RESULT = new ArrayList<>();
                RESULT.add(new Declaracion(id.lexema, null, tipo, id.linea, id.columna));
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("parametros",2, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // enviar ::= enviar COMA exp 
            {
              List<Exprecion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		List<Exprecion> r = (List<Exprecion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = r;
            RESULT.add(e);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("enviar",6, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // enviar ::= exp 
            {
              List<Exprecion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new ArrayList<>();
            RESULT.add(e);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("enviar",6, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoDato ::= INT 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.INT.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoDato ::= STRING 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.STRING.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDato ::= CHAR 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.CHAR.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDato ::= DOUBLE 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.DOUBLE.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoDato ::= BOOL 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.BOOLEAN.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDato ::= VOID 
            {
              Integer RESULT =null;
		
                RESULT = Tipo.VOID.ordinal();
            
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("tipoDato",4, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= MENOS exp 
            {
              Exprecion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            Literal e1 = new Literal(-1, Tipo.INT.ordinal(), r.linea, r.columna);
            RESULT = new Operacion(e1, e2, OpcionOperacion.MUL.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp MAS exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.SUMA.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp MENOS exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.RESTA.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp DIV exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.DIV.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp POT exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.POT.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp MUL exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.MUL.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= exp MOD exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Operacion(e1, e2, OpcionOperacion.MOD.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= exp MAQ exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.MAYOR.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= exp MEQ exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.MENOR.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= exp MAI exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.MAYOR_IGUAL.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= exp MEI exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.MENOR_IGUAL.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= exp DIF exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.DIFERENTE.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= exp EQUAL exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.IGUAL.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= exp INCER exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Relacional(e1, e2,OpcionRelacional.INCERTEZA.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= exp OR exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Logica(e1, e2, OpcionLogica.OR.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= exp XOR exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Logica(e1, e2, OpcionLogica.XOR.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= exp AND exp 
            {
              Exprecion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Exprecion e1 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e2 = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Logica(e1, e2, OpcionLogica.AND.ordinal(), r.linea, r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= NOT exp 
            {
              Exprecion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Logica(e, e, OpcionLogica.NOT.ordinal(),r.linea , r.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= f 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = e;
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // f ::= PAR_A exp PAR_C 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		Exprecion e = (Exprecion)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		
            RESULT = e;
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // f ::= ENTERO 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.INT.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // f ::= DECIMAL 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.DOUBLE.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // f ::= CADENA 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.STRING.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // f ::= CARACTER 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.CHAR.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // f ::= TRUE 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.BOOLEAN.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // f ::= FALSE 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Literal(e.value, Tipo.BOOLEAN.ordinal(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // f ::= ID 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.peek()).value;
		
            RESULT = new Variable(e.lexema, e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // f ::= ID PAR_A PAR_C 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)).value;
		
            RESULT = new ValFuncion(e.lexema, new ArrayList<Exprecion>(), e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-2)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // f ::= ID PAR_A enviar PAR_C 
            {
              Exprecion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).right;
		List<Exprecion> p = (List<Exprecion>)((java_cup.runtime.Symbol) CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-1)).value;
		
            RESULT = new ValFuncion(e.lexema, p, e.linea, e.columna);
        
              CUP$ParserBug$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserBug$stack.elementAt(CUP$ParserBug$top-3)), ((java_cup.runtime.Symbol)CUP$ParserBug$stack.peek()), RESULT);
            }
          return CUP$ParserBug$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserBug$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserBug$do_action(
    int                        CUP$ParserBug$act_num,
    java_cup.runtime.lr_parser CUP$ParserBug$parser,
    java.util.Stack            CUP$ParserBug$stack,
    int                        CUP$ParserBug$top)
    throws java.lang.Exception
    {
              return CUP$ParserBug$do_action_part00000000(
                               CUP$ParserBug$act_num,
                               CUP$ParserBug$parser,
                               CUP$ParserBug$stack,
                               CUP$ParserBug$top);
    }
}

}
